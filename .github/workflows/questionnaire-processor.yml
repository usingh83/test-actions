name: Process Questionnaire

on:
  issues:
    types: [opened]

jobs:
  process:
    if: contains(github.event.issue.title, 'Questionnaire for PR')
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Extract issue body to env
        id: parse
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Extract PR number
        id: extract
        run: |
          TITLE="${{ github.event.issue.title }}"
  
          PR_NUMBER="$(echo "$TITLE" | grep -oE 'pr[[:space:]]*#?[[:space:]]*[0-9]+' | grep -oE '[0-9]+' | head -n1)"
          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="$(echo "$TITLE" | grep -oE '/pull/[0-9]+' | sed -E 's#.*/([0-9]+)#\1#')"
          fi
          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="$(echo "$TITLE" | grep -oE '[0-9]+' | head -n1)"
          fi
  
          if [ -z "$PR_NUMBER" ]; then
            echo "Could not extract PR number from issue title" >&2
            exit 1
          fi

          echo "pr=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Validate submission (details or at least one bypass checkbox)
        id: validate
        run: |
          BODY="${{ github.event.issue.body }}"

          if echo "$BODY" | grep -qE '\- \[x\]'; then
            echo "bypass_selected=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          CLEAN="$(echo "$BODY" | sed -E 's/PR:.*$//I' | sed -E '/- \[[ xX]\]/d' | tr -d '[:space:]')"
          if [ -n "$CLEAN" ]; then
            echo "details_present=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Validation failed: no details and no bypass reasons selected" >&2
          exit 1

      - name: Update or create `Questionnaire Approval` check as success and post JSON
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const prNumber = ${ { steps.extract.outputs.pr } };
            } catch (e) {
              // fallback if outputs interpolation fails (log and exit)
            }
            const prNumber = `${{ steps.extract.outputs.pr }}`;
            if (!prNumber) throw new Error("PR number output missing.");

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get the pull request to find head SHA
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            const headSha = pr.head.sha;

            // Find existing check run
            const checks = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: headSha
            });

            const checkName = "Questionnaire Check / Questionnaire Approval";
            const run = checks.data.check_runs.find(c => c.name === checkName);

            // Use webhook issue body directly (avoid reading a temp file)
            const issueBody = context.payload.issue && context.payload.issue.body ? context.payload.issue.body : "";

            const submission = {
              from_issue: context.payload.issue.number,
              pr: prNumber,
              submitted_at: new Date().toISOString(),
              body: issueBody
            };

            const output = {
              title: "Questionnaire Complete",
              summary: "Approver submitted questionnaire or selected bypass reason(s).",
              text: "Submission posted to PR as JSON."
            };

            if (run) {
              await github.rest.checks.update({
                owner,
                repo,
                check_run_id: run.id,
                status: "completed",
                conclusion: "success",
                output
              });
            } else {
              await github.rest.checks.create({
                owner,
                repo,
                name: checkName,
                head_sha: headSha,
                status: "completed",
                conclusion: "success",
                output
              });
            }

            // Post submission JSON back to PR
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: "📝 **Questionnaire Submission**\n\n```json\n" + JSON.stringify(submission, null, 2) + "\n```"
            });

      - name: Save issue body for artifact (optional)
        if: always()
        run: |
          printf "%s" "${{ github.event.issue.body }}" > __issue_body_tmp.txt

      - name: Upload JSON artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: questionnaire-submission
          path: __issue_body_tmp.txt

      - name: Close the issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });